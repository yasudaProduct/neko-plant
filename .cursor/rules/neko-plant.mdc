---
description: 
globs: 
alwaysApply: true
---
# neko-plant コーディングルール

## プロジェクト構造

1. **ディレクトリ構成**
   - ページ固有のコンポーネントはそのページのディレクトリに配置する
   - 共通コンポーネントは `@/components` ディレクトリに配置する
   - データフェッチングロジックは `@/actions` ディレクトリに配置する
   - ユーティリティ関数は `@/lib` ディレクトリに配置する

2. **認証関連**
   - 認証が必要なページでは未認証時に `/signin` にリダイレクトする
   - 認証関連のUI処理は `@/contexts/AuthDialogContext` を使用する

## 命名規則

1. **ファイル名**
   - コンポーネントファイルは PascalCase で命名する (例: `CommentForm.tsx`)
   - 動的ルートは `[param]` のようにブラケットで囲む (例: `[id]`)
   - 認証関連のページは `(auth-pages)` グループに配置する

2. **コンポーネント名**
   - 植物詳細ページは `PlantPage` として命名する
   - 設定関連のページは `AccountPage` などの明確な名前を使用する

## スタイリング

1. **カラースキーム**
   - プライマリーカラーとして緑系の色を使用する
   - 良い評価表示には `text-green-600` を使用する
   - 悪い評価表示には `text-indigo-500` を使用する
   - 背景色はベースとして `bg-green-50` を使用する

2. **レイアウト**
   - cssはtailwindcssで記述する
   - レスポンシブ対応する

3. **UI要素**
   - ボタンにはカテゴリに応じた適切な色とアイコンを使用する
   - モバイル表示では単一カラム、デスクトップでは適宜マルチカラムレイアウトを使用する

## エラー

1. **エラー表示**
   - ユーザーフレンドリーなエラーメッセージを日本語で表示する

## データベース

1. **データベース**
   - データベースにはsupabaseを使用しています。
   - supabase上のプロジェクトは"neko-plant"です。
   - supabaseへは本番環境へMCP接続で操作できます。
   - supabaseへの変更操作前は必ず確認してください。

## GitHub

1. **リポジトリ情報**
   - リポジトリオーナー: `yasudaProduct`
   - リポジトリ名: `neko-plant`
   - プロジェクト管理は GitHub Issues を使用します。
   - プルリクエストは必ずレビューを経てからマージしてください。