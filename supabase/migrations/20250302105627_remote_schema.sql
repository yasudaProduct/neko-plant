

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."evaluation_type" AS ENUM (
    'good',
    'bad'
);


ALTER TYPE "public"."evaluation_type" OWNER TO "postgres";


CREATE TYPE "public"."mood" AS ENUM (
    'good',
    'bad'
);


ALTER TYPE "public"."mood" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."create_user_for_auth"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$DECLARE
  alias_id TEXT;
BEGIN
  raise log 'logging message: create_user_for_auth start';
  raise log 'logging message: current_user %', current_user;
  raise log 'logging message: session_user %', session_user;

  raise log 'logging message: %', new.id;
  raise log 'logging message: %', new.
  raw_user_meta_data->>'alias_id';
  raise log 'logging message: %', new.raw_user_meta_data->>'name';

  -- alias_id の決定（NULL ならランダム生成）
  alias_id := COALESCE(new.raw_user_meta_data->>'alias_id', public.generate_random_alias_id());

  raise log 'logging message: alias_id=%', alias_id;

  insert into public.users (auth_id, alias_id, name)
  values (
    new.id,
    alias_id,
    new.raw_user_meta_data->>'name'
    );
  raise log 'logging message: create_user_for_auth end';
  return new;
end;$$;


ALTER FUNCTION "public"."create_user_for_auth"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."generate_random_alias_id"() RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$DECLARE
  random_alias_id TEXT;
BEGIN
  SELECT string_agg(chr(97 + (random() * 26)::int), '')
  INTO random_alias_id
  FROM generate_series(1, 5);

  RETURN random_alias_id;
END;$$;


ALTER FUNCTION "public"."generate_random_alias_id"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."logging"("log_message" "text") RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
begin
  raise log 'logging message: %', log_message;
end;
$$;


ALTER FUNCTION "public"."logging"("log_message" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_user_for_auth"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$DECLARE
  up_alias_id TEXT;
begin
  raise log 'logging message: update_user_for_auth start';
  raise log 'logging message: current_user %', current_user;
  raise log 'logging message: session_user %', session_user;
  
  raise log 'logging message: %', new.id;
  raise log 'logging message: %', new.
  raw_user_meta_data->>'default_alias_id';
  raise log 'logging message: %', new.raw_user_meta_data->>'name';

  -- alias_id の決定（NULL ならランダム生成）
  up_alias_id := COALESCE(new.raw_user_meta_data->>'alias_id', public.generate_random_alias_id());

  UPDATE public.users
    SET name = new.raw_user_meta_data->>'name',
        alias_id = up_alias_id
        -- image = new.raw_user_meta_data->>'image_src'
    WHERE auth_id = new.id;
  raise log 'logging message: update_user_for_auth end';
  return new;
end;$$;


ALTER FUNCTION "public"."update_user_for_auth"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."evaluations" (
    "id" integer NOT NULL,
    "plant_id" integer NOT NULL,
    "user_id" integer,
    "type" "public"."evaluation_type" NOT NULL,
    "comment" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."evaluations" OWNER TO "postgres";


ALTER TABLE "public"."evaluations" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."evaluations_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."neko" (
    "id" integer NOT NULL,
    "name" character varying NOT NULL,
    "image" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."neko" OWNER TO "postgres";


COMMENT ON TABLE "public"."neko" IS 'neko';



ALTER TABLE "public"."neko" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."neko_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."pets" (
    "id" integer NOT NULL,
    "user_id" integer NOT NULL,
    "neko_id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "image" character varying,
    "name" character varying NOT NULL
);


ALTER TABLE "public"."pets" OWNER TO "postgres";


COMMENT ON TABLE "public"."pets" IS 'pets';



ALTER TABLE "public"."pets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."plants" (
    "id" integer NOT NULL,
    "name" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "image_src" character varying
);


ALTER TABLE "public"."plants" OWNER TO "postgres";


COMMENT ON TABLE "public"."plants" IS 'plants';



ALTER TABLE "public"."plants" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."plant_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" integer NOT NULL,
    "auth_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "alias_id" character varying NOT NULL,
    "name" character varying NOT NULL,
    "image" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."users" OWNER TO "postgres";


COMMENT ON TABLE "public"."users" IS 'users';



ALTER TABLE "public"."users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."users_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."evaluations"
    ADD CONSTRAINT "evaluations_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."neko"
    ADD CONSTRAINT "neko_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."neko"
    ADD CONSTRAINT "neko_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."plants"
    ADD CONSTRAINT "plant_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."evaluations"
    ADD CONSTRAINT "evaluations_plant_id_fkey" FOREIGN KEY ("plant_id") REFERENCES "public"."plants"("id");



ALTER TABLE ONLY "public"."evaluations"
    ADD CONSTRAINT "evaluations_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_neko_id_fkey" FOREIGN KEY ("neko_id") REFERENCES "public"."neko"("id");



ALTER TABLE ONLY "public"."pets"
    ADD CONSTRAINT "pets_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_auth_id_fkey" FOREIGN KEY ("auth_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."create_user_for_auth"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_user_for_auth"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_user_for_auth"() TO "service_role";



GRANT ALL ON FUNCTION "public"."generate_random_alias_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."generate_random_alias_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_random_alias_id"() TO "service_role";



GRANT ALL ON FUNCTION "public"."logging"("log_message" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."logging"("log_message" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."logging"("log_message" "text") TO "service_role";



GRANT ALL ON FUNCTION "public"."update_user_for_auth"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_user_for_auth"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_user_for_auth"() TO "service_role";


















GRANT ALL ON TABLE "public"."evaluations" TO "anon";
GRANT ALL ON TABLE "public"."evaluations" TO "authenticated";
GRANT ALL ON TABLE "public"."evaluations" TO "service_role";



GRANT ALL ON SEQUENCE "public"."evaluations_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."evaluations_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."evaluations_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."neko" TO "anon";
GRANT ALL ON TABLE "public"."neko" TO "authenticated";
GRANT ALL ON TABLE "public"."neko" TO "service_role";



GRANT ALL ON SEQUENCE "public"."neko_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."neko_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."neko_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."pets" TO "anon";
GRANT ALL ON TABLE "public"."pets" TO "authenticated";
GRANT ALL ON TABLE "public"."pets" TO "service_role";



GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pets_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."plants" TO "anon";
GRANT ALL ON TABLE "public"."plants" TO "authenticated";
GRANT ALL ON TABLE "public"."plants" TO "service_role";



GRANT ALL ON SEQUENCE "public"."plant_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."plant_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."plant_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";
GRANT ALL ON TABLE "public"."users" TO "supabase_auth_admin";



GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
